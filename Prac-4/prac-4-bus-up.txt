#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/netanim-module.h"
#include "ns3/mobility-module.h"
// Default Network Topology
//
// 172.16.1.0
// n0 -------------- n1 n2 n3 n4
// point-to-point | | | |
// ================
// LAN 176.16.2.0

using namespace ns3;
NS_LOG_COMPONENT_DEFINE ("SecondScriptExample");
int main (int argc, char *argv[])
{
bool verbose = true; //to keep log information
uint32_t nCsma = 3;
CommandLine cmd (__FILE__);
cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma);
cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);
cmd.Parse (argc,argv);
if (verbose)
{
LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
}
nCsma = nCsma == 0 ? 1 : nCsma;
NodeContainer p2pNodes;
p2pNodes.Create (2);
NodeContainer csmaNodes; /*different from first practical*/
csmaNodes.Add (p2pNodes.Get (1));
csmaNodes.Create (nCsma);/*end*/
PointToPointHelper pointToPoint;
pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));
NetDeviceContainer p2pDevices;
p2pDevices = pointToPoint.Install (p2pNodes);
CsmaHelper csma;/*Different from first*/
csma.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));/*end*/
NetDeviceContainer csmaDevices;/*csma is the only change from first*/
csmaDevices = csma.Install (csmaNodes);
InternetStackHelper stack;
stack.Install (p2pNodes.Get (0));
stack.Install (csmaNodes);
Ipv4AddressHelper address;
address.SetBase ("172.16.1.0", "255.255.255.0");
Ipv4InterfaceContainer p2pInterfaces;
p2pInterfaces = address.Assign (p2pDevices);
address.SetBase ("172.16.2.0", "255.255.255.0");/*Different*/
Ipv4InterfaceContainer csmaInterfaces;
csmaInterfaces = address.Assign (csmaDevices);/*end*/
UdpEchoServerHelper echoServer (2000);
ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma));// we
will get the last node
serverApps.Start (Seconds (1.0));
serverApps.Stop (Seconds (10.0));

UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 2000);
echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
ApplicationContainer clientApps = echoClient.Install (p2pNodes.Get (0)); // installing
at 0th node
clientApps.Start (Seconds (2.0));
clientApps.Stop (Seconds (10.0));
Ipv4GlobalRoutingHelper::PopulateRoutingTables ();/*Automatically create the routing
tables*/
pointToPoint.EnablePcapAll ("p2p");
csma.EnablePcap ("csma1", csmaDevices.Get (1), true);
csma.EnablePcap ("csma2", csmaDevices.Get (2), true);
//AnimationInterface anim("bus.xml");/*Net ANIM ABOVE 2 MODULES WE HAVE
TO ADD Part 2*/
//AnimationInterface::SetConstantPosition(p2pNodes.Get(0),10,10);/*Part 3*/
//AnimationInterface::SetConstantPosition(p2pNodes.Get(1),20,20);
//AnimationInterface::SetConstantPosition(csmaNodes.Get(1),30,30);
//AnimationInterface::SetConstantPosition(csmaNodes.Get(2),40,40);
//AnimationInterface::SetConstantPosition(csmaNodes.Get(3),50,50);/*Part 3 end*/
Simulator::Run ();
Simulator::Destroy ();
return 0;
}
